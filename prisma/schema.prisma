generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  firstName     String
  lastName      String
  password      String
  role          Role           @default(STUDENT)
  userClass     String?
  section       String?
  department    String?
  phone         String?
  address       String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  flashcards    Flashcard[]
  forumLikes    ForumLike[]
  forumPosts    ForumPost[]
  forumReplies  ForumReply[]
  messages      Message[]
  reviews       Review[]
  tutorSessions TutorSession[]
  tutor         Tutor?

  @@map("users")
}

model Tutor {
  id            Int            @id @default(autoincrement())
  userId        Int            @unique
  experience    Int
  rating        Float          @default(0)
  isOnline      Boolean        @default(false)
  bio           String? @db.Text
  hourlyRate    Float?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  reviews       Review[]
  sessions      TutorSession[]
  tutorSubjects TutorSubject[]
  user          User           @relation(fields: [userId], references: [id])

  @@map("tutors")
}

model Subject {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  level       String
  section     String?        // Section sp√©cifique (SMP, SVT, LLA, SES, etc.)
  description String?
  createdAt   DateTime       @default(now())
  flashcards  Flashcard[]
  forumPosts  ForumPost[]
  tutors      TutorSubject[]
  chapters    Chapter[]

  @@map("subjects")
}

model Chapter {
  id          Int            @id @default(autoincrement())
  name        String
  subjectId   Int
  description String?
  order       Int            @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  subject     Subject        @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  flashcards  Flashcard[]

  @@unique([name, subjectId])
  @@index([subjectId])
  @@map("chapters")
}

model TutorSubject {
  id        Int     @id @default(autoincrement())
  tutorId   Int
  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])
  tutor     Tutor   @relation(fields: [tutorId], references: [id])

  @@unique([tutorId, subjectId])
  @@index([subjectId], map: "tutor_subjects_subjectId_fkey")
  @@map("tutor_subjects")
}

model Flashcard {
  id         Int                @id @default(autoincrement())
  question   String
  answer     String
  subjectId  Int
  chapterId  Int?
  userId     Int
  difficulty String             @default("medium")
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  attempts   FlashcardAttempt[]
  subject    Subject            @relation(fields: [subjectId], references: [id])
  chapter    Chapter?           @relation(fields: [chapterId], references: [id])
  user       User               @relation(fields: [userId], references: [id])

  @@index([subjectId], map: "flashcards_subjectId_fkey")
  @@index([chapterId], map: "flashcards_chapterId_fkey")
  @@index([userId], map: "flashcards_userId_fkey")
  @@map("flashcards")
}

model FlashcardAttempt {
  id          Int       @id @default(autoincrement())
  flashcardId Int
  userId      Int
  isCorrect   Boolean
  timeSpent   Int
  createdAt   DateTime  @default(now())
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])

  @@index([flashcardId], map: "flashcard_attempts_flashcardId_fkey")
  @@map("flashcard_attempts")
}

model TutorSession {
  id          Int           @id @default(autoincrement())
  tutorId     Int
  studentId   Int
  subject     String
  duration    Int
  status      SessionStatus @default(SCHEDULED)
  scheduledAt DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  messages    Message[]
  student     User          @relation(fields: [studentId], references: [id])
  tutor       Tutor         @relation(fields: [tutorId], references: [id])

  @@index([studentId], map: "tutor_sessions_studentId_fkey")
  @@index([tutorId], map: "tutor_sessions_tutorId_fkey")
  @@map("tutor_sessions")
}

model Message {
  id         Int           @id @default(autoincrement())
  sessionId  Int?
  senderId   Int
  receiverId Int
  content    String
  isRead     Boolean       @default(false)
  createdAt  DateTime      @default(now())
  sender     User          @relation(fields: [senderId], references: [id])
  session    TutorSession? @relation(fields: [sessionId], references: [id])

  @@index([senderId], map: "messages_senderId_fkey")
  @@index([sessionId], map: "messages_sessionId_fkey")
  @@map("messages")
}

model Review {
  id        Int      @id @default(autoincrement())
  tutorId   Int
  studentId Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  student   User     @relation(fields: [studentId], references: [id])
  tutor     Tutor    @relation(fields: [tutorId], references: [id])

  @@unique([tutorId, studentId])
  @@index([studentId], map: "reviews_studentId_fkey")
  @@map("reviews")
}

model ForumPost {
  id        Int          @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  subjectId Int?
  isPinned  Boolean      @default(false)
  isLocked  Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  likes     ForumLike[]
  author    User         @relation(fields: [authorId], references: [id])
  subject   Subject?     @relation(fields: [subjectId], references: [id])
  replies   ForumReply[]

  @@index([authorId], map: "forum_posts_authorId_fkey")
  @@index([subjectId], map: "forum_posts_subjectId_fkey")
  @@map("forum_posts")
}

model ForumReply {
  id        Int          @id @default(autoincrement())
  content   String
  postId    Int
  authorId  Int
  parentId  Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  likes     ForumLike[]
  author    User         @relation(fields: [authorId], references: [id])
  parent    ForumReply?  @relation("ReplyReplies", fields: [parentId], references: [id])
  replies   ForumReply[] @relation("ReplyReplies")
  post      ForumPost    @relation(fields: [postId], references: [id])

  @@index([authorId], map: "forum_replies_authorId_fkey")
  @@index([parentId], map: "forum_replies_parentId_fkey")
  @@index([postId], map: "forum_replies_postId_fkey")
  @@map("forum_replies")
}

model ForumLike {
  id        Int         @id @default(autoincrement())
  userId    Int
  postId    Int?
  replyId   Int?
  createdAt DateTime    @default(now())
  post      ForumPost?  @relation(fields: [postId], references: [id])
  reply     ForumReply? @relation(fields: [replyId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@unique([userId, replyId])
  @@index([postId], map: "forum_likes_postId_fkey")
  @@index([replyId], map: "forum_likes_replyId_fkey")
  @@map("forum_likes")
}

enum Role {
  STUDENT
  TUTOR
  ADMIN
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
