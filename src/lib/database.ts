import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

// Global variable to store the Prisma client instance
declare global {
  var __prisma: PrismaClient | undefined;
}

// Create a singleton instance of PrismaClient
export const prisma = globalThis.__prisma || new PrismaClient({
  log: ['query', 'error', 'warn'],
});

// In development, store the client on the global object to prevent multiple instances
if (process.env.NODE_ENV !== 'production') {
  globalThis.__prisma = prisma;
}

// Database connection helper
export async function connectDatabase() {
  try {
    await prisma.$connect();
    console.log('‚úÖ Base de donn√©es connect√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå √âchec de la connexion √† la base de donn√©es:', error);
    throw error;
  }
}

// Database disconnection helper
export async function disconnectDatabase() {
  try {
    await prisma.$disconnect();
    console.log('‚úÖ Base de donn√©es d√©connect√©e avec succ√®s');
  } catch (error) {
    console.error('‚ùå √âchec de la d√©connexion de la base de donn√©es:', error);
    throw error;
  }
}

// Seed data for testing
export async function seedDatabase() {
  try {
    console.log('üå± Initialisation de la base de donn√©es avec des donn√©es de test compl√®tes...');
    
    // Hash password for all users
    const hashedPassword = await bcrypt.hash('password123', 10);

    // Create comprehensive subjects
    const subjects = await Promise.all([
      // Terminale subjects
      prisma.subject.upsert({
        where: { name: 'Math√©matiques' },
        update: {},
        create: {
          name: 'Math√©matiques',
          level: 'Terminale',
          description: 'Math√©matiques pour la classe de terminale'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'Physique' },
        update: {},
        create: {
          name: 'Physique',
          level: 'Terminale',
          description: 'Physique pour la classe de terminale'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'Chimie' },
        update: {},
        create: {
          name: 'Chimie',
          level: 'Terminale',
          description: 'Chimie pour la classe de terminale'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'Biologie' },
        update: {},
        create: {
          name: 'Biologie',
          level: 'Terminale',
          description: 'Biologie pour la classe de terminale'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'SVT' },
        update: {},
        create: {
          name: 'SVT',
          level: 'Terminale',
          description: 'Sciences de la Vie et de la Terre'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'SMP' },
        update: {},
        create: {
          name: 'SMP',
          level: 'Terminale',
          description: 'Sciences Math√©matiques et Physiques'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'SES' },
        update: {},
        create: {
          name: 'SES',
          level: 'Terminale',
          description: 'Sciences √âconomiques et Sociales'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'LLA' },
        update: {},
        create: {
          name: 'LLA',
          level: 'Terminale',
          description: 'Lettres, Langues et Arts'
        }
      }),
      // 9√®me subjects
      prisma.subject.upsert({
        where: { name: 'Fran√ßais' },
        update: {},
        create: {
          name: 'Fran√ßais',
          level: '9√®me',
          description: 'Fran√ßais pour la classe de 9√®me'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'Histoire-G√©ographie' },
        update: {},
        create: {
          name: 'Histoire-G√©ographie',
          level: '9√®me',
          description: 'Histoire-G√©ographie pour la classe de 9√®me'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'Anglais' },
        update: {},
        create: {
          name: 'Anglais',
          level: '9√®me',
          description: 'Anglais pour la classe de 9√®me'
        }
      }),
      prisma.subject.upsert({
        where: { name: 'Sciences' },
        update: {},
        create: {
          name: 'Sciences',
          level: '9√®me',
          description: 'Sciences pour la classe de 9√®me'
        }
      })
    ]);

    // Create comprehensive test users with Haitian names
    const testUsers = await Promise.all([
      // Admin
      prisma.user.upsert({
        where: { email: 'admin@tyala.com' },
        update: {},
        create: {
          email: 'admin@tyala.com',
          firstName: 'Admin',
          lastName: 'Tyala',
          password: hashedPassword,
          role: 'ADMIN',
          userClass: null,
          section: null,
          department: 'Ouest',
          phone: '+509 1234-5678',
          address: 'Port-au-Prince, Ha√Øti'
        }
      }),
      // Students
      prisma.user.upsert({
        where: { email: 'carlos.rodriguez@test.com' },
        update: {},
        create: {
          email: 'carlos.rodriguez@test.com',
          firstName: 'Carlos',
          lastName: 'Rodriguez',
          password: hashedPassword,
          role: 'STUDENT',
          userClass: 'Terminale',
          section: 'SMP',
          department: 'Ouest'
        }
      }),
      prisma.user.upsert({
        where: { email: 'maria.gonzalez@test.com' },
        update: {},
        create: {
          email: 'maria.gonzalez@test.com',
          firstName: 'Maria',
          lastName: 'Gonzalez',
          password: hashedPassword,
          role: 'STUDENT',
          userClass: 'Terminale',
          section: 'SVT',
          department: 'Nord'
        }
      }),
      prisma.user.upsert({
        where: { email: 'jose.martinez@test.com' },
        update: {},
        create: {
          email: 'jose.martinez@test.com',
          firstName: 'Jos√©',
          lastName: 'Martinez',
          password: hashedPassword,
          role: 'STUDENT',
          userClass: '9√®me',
          section: null,
          department: 'Sud'
        }
      }),
      // Tutors
      prisma.user.upsert({
        where: { email: 'prof.marie@test.com' },
        update: {},
        create: {
          email: 'prof.marie@test.com',
          firstName: 'Marie',
          lastName: 'Diop',
          password: hashedPassword,
          role: 'TUTOR',
          department: 'Ouest'
        }
      }),
      prisma.user.upsert({
        where: { email: 'prof.luis@test.com' },
        update: {},
        create: {
          email: 'prof.luis@test.com',
          firstName: 'Luis',
          lastName: 'Fernandez',
          password: hashedPassword,
          role: 'TUTOR',
          department: 'Artibonite'
        }
      }),
      prisma.user.upsert({
        where: { email: 'dr.carmen@test.com' },
        update: {},
        create: {
          email: 'dr.carmen@test.com',
          firstName: 'Carmen',
          lastName: 'Vargas',
          password: hashedPassword,
          role: 'TUTOR',
          department: 'Centre'
        }
      }),
      prisma.user.upsert({
        where: { email: 'prof.ricardo@test.com' },
        update: {},
        create: {
          email: 'prof.ricardo@test.com',
          firstName: 'Ricardo',
          lastName: 'Mendoza',
          password: hashedPassword,
          role: 'TUTOR',
          department: 'Nord-Est'
        }
      })
    ]);

    // Create comprehensive tutors with Haitian names
    const tutors = await Promise.all([
      prisma.tutor.upsert({
        where: { userId: testUsers[3].id },
        update: {},
        create: {
          userId: testUsers[3].id,
          experience: 10,
          rating: 4.8,
          isOnline: true,
          bio: 'Professeur exp√©riment√© en math√©matiques et physique avec plus de 10 ans d\'exp√©rience en Ha√Øti.',
          hourlyRate: 25.0
        }
      }),
      prisma.tutor.upsert({
        where: { userId: testUsers[4].id },
        update: {},
        create: {
          userId: testUsers[4].id,
          experience: 8,
          rating: 4.9,
          isOnline: true,
          bio: 'Sp√©cialiste en chimie et biologie, passionn√© par l\'enseignement en Ha√Øti.',
          hourlyRate: 30.0
        }
      }),
      prisma.tutor.upsert({
        where: { userId: testUsers[5].id },
        update: {},
        create: {
          userId: testUsers[5].id,
          experience: 12,
          rating: 4.7,
          isOnline: false,
          bio: 'Expert en fran√ßais et litt√©rature, ancien professeur de lyc√©e en Ha√Øti.',
          hourlyRate: 20.0
        }
      }),
      prisma.tutor.upsert({
        where: { userId: testUsers[6].id },
        update: {},
        create: {
          userId: testUsers[6].id,
          experience: 15,
          rating: 4.9,
          isOnline: true,
          bio: 'Professeur agr√©g√© en histoire-g√©ographie, tr√®s exp√©riment√© en Ha√Øti.',
          hourlyRate: 28.0
        }
      })
    ]);

    // Create tutor-subject relationships
    await Promise.all([
      prisma.tutorSubject.upsert({
        where: { tutorId_subjectId: { tutorId: tutors[0].id, subjectId: subjects[0].id } },
        update: {},
        create: { tutorId: tutors[0].id, subjectId: subjects[0].id } // Math√©matiques
      }),
      prisma.tutorSubject.upsert({
        where: { tutorId_subjectId: { tutorId: tutors[0].id, subjectId: subjects[1].id } },
        update: {},
        create: { tutorId: tutors[0].id, subjectId: subjects[1].id } // Physique
      }),
      prisma.tutorSubject.upsert({
        where: { tutorId_subjectId: { tutorId: tutors[1].id, subjectId: subjects[2].id } },
        update: {},
        create: { tutorId: tutors[1].id, subjectId: subjects[2].id } // Chimie
      }),
      prisma.tutorSubject.upsert({
        where: { tutorId_subjectId: { tutorId: tutors[1].id, subjectId: subjects[3].id } },
        update: {},
        create: { tutorId: tutors[1].id, subjectId: subjects[3].id } // Biologie
      }),
      prisma.tutorSubject.upsert({
        where: { tutorId_subjectId: { tutorId: tutors[2].id, subjectId: subjects[8].id } },
        update: {},
        create: { tutorId: tutors[2].id, subjectId: subjects[8].id } // Fran√ßais
      }),
      prisma.tutorSubject.upsert({
        where: { tutorId_subjectId: { tutorId: tutors[3].id, subjectId: subjects[9].id } },
        update: {},
        create: { tutorId: tutors[3].id, subjectId: subjects[9].id } // Histoire-G√©ographie
      })
    ]);

    // Note: Les flashcards compl√®tes sont maintenant ajout√©es via le script seed-flashcards.cjs
    // qui contient 10 flashcards par mati√®re pour un total de 120+ flashcards
    console.log('üìù Les flashcards compl√®tes sont ajout√©es via le script d√©di√© seed-flashcards.cjs');

    // Create test messages for chat with Haitian names
    const messages = await Promise.all([
      prisma.message.create({
        data: {
          senderId: testUsers[0].id,
          receiverId: testUsers[3].id,
          content: 'Bonjour professeur, j\'aimerais de l\'aide en math√©matiques',
          createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000) // 2 hours ago
        }
      }),
      prisma.message.create({
        data: {
          senderId: testUsers[3].id,
          receiverId: testUsers[0].id,
          content: 'Bonjour Carlos ! Je serais ravi de vous aider. Quel chapitre vous pose probl√®me ?',
          createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000) // 1 hour ago
        }
      }),
      prisma.message.create({
        data: {
          senderId: testUsers[0].id,
          receiverId: testUsers[3].id,
          content: 'Les √©quations du second degr√©, je n\'arrive pas √† comprendre la m√©thode',
          createdAt: new Date(Date.now() - 30 * 60 * 1000) // 30 minutes ago
        }
      }),
      prisma.message.create({
        data: {
          senderId: testUsers[3].id,
          receiverId: testUsers[0].id,
          content: 'Parfait ! Je vais vous expliquer √©tape par √©tape. Pouvez-vous me montrer un exemple d\'√©quation ?',
          createdAt: new Date(Date.now() - 15 * 60 * 1000) // 15 minutes ago
        }
      }),
      prisma.message.create({
        data: {
          senderId: testUsers[1].id,
          receiverId: testUsers[4].id,
          content: 'Bonjour Dr. Luis, j\'ai besoin d\'aide en biologie',
          createdAt: new Date(Date.now() - 45 * 60 * 1000) // 45 minutes ago
        }
      }),
      prisma.message.create({
        data: {
          senderId: testUsers[4].id,
          receiverId: testUsers[1].id,
          content: 'Bonjour Maria ! En quoi puis-je vous aider en biologie ?',
          createdAt: new Date(Date.now() - 40 * 60 * 1000) // 40 minutes ago
        }
      })
    ]);

    console.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s avec des donn√©es de test compl√®tes');
    console.log(`üìö Cr√©√© ${subjects.length} mati√®res`);
    console.log(`üë• Cr√©√© ${testUsers.length} utilisateurs (${testUsers.filter(u => u.role === 'STUDENT').length} √©tudiants, ${testUsers.filter(u => u.role === 'TUTOR').length} tuteurs, ${testUsers.filter(u => u.role === 'ADMIN').length} administrateurs)`);
    console.log(`üéì Cr√©√© ${tutors.length} tuteurs`);
    console.log(`üìù Flashcards compl√®tes disponibles via seed-flashcards.cjs (120+ flashcards)`);
    console.log(`üí¨ Cr√©√© ${messages.length} messages`);

  } catch (error) {
    console.error('‚ùå √âchec de l\'initialisation de la base de donn√©es:', error);
    throw error;
  }
}

export default prisma;